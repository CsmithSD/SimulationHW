<html><head><title>Starlogo 1.0 Documentation</title><meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"></head><body bgcolor="#FFFFFF"><p><em><font size="+1">Control Flow (Printable)</font></em> </p><p><em>ask-list-of-turtles</em> <code>list-of-turtle-ids ilist</code> <b>[Observer,   Turtle]</b> </p><p> Turtles whose <code>who</code> numbers (ID numbers) are in <code>list-of-turtle-ids</code>   run <code>ilist</code>. The caller of this command waits for it to finish before   continuing. If some invalid <code>who</code> numbers make up <code>list-of-turtle-ids</code>,   they are ignored. <p><em>ask-patches</em> <code>ilist</code> <b>[Observer]</b> <p> This observer command asks all of the patches to run the <code>ilist</code>.   The observer will wait for the patches to finish before moving on. <p><em>ask-patch-at </em><code>xcor ycor ilist</code> <b>[Observer, Turtle]</b> <p> This command asks the patch which is <code>xcor</code> units in the x direction   and <code>ycor</code> units in the y direction away from the caller to run the   <code>ilist</code>. The caller of this command will wait for the patch to finish   before moving on. The observer is considered to be located at 0 0. <p><em>ask-turtle</em> <code>number ilist</code> <b>[Observer]</b> <p> Asks turtle with ID number <code>number</code> to perform <code>ilist</code>.   The observer will wait for all of the turtles to finish before continuing. <p><em>ask-turtles</em> <code>ilist</code> <b>[Observer]</b> <p> Asks all turtles to run <code>ilist</code>. The observer will wait for all   of the turtles to finish before continuing. <p><em>case</em> <code>variable </code> <code>[anything1 ilist1 </code> <code>anything2   ilist2]</code> <b>[Observer, Turtle]</b> </p><p> Checks if the first argument <code>variable</code> is equal to any of the   <code>anythings</code> in the list. If it is equal, the corresponding <code>ilist</code>   is executed and control skips to the end of the <code>case</code> statement.   If nothing matches, no <code>ilists</code> are executed and control skips to   the end of the <code>case</code> statement. <p>Sample usage: <p><code> case temperature<br>  [<br>  "cold" [show "boy, it's cold!"]<br>  "warm" [show "mmmm. nice."]<br>  "hot" ["wow, it's hot!"]<br>  ]</code><p><em>every</em> <code>number list to run</code> <b>[Observer, Turtle]</b> <p><code>every</code> is just like <code>loop</code>, in that it runs its <code>list   to run</code> forever, but it waits <code>number</code> seconds between each   iteration.<p><em>if</em> <code>condition ilist</code> <b>[Observer, Turtle]</b> <p> Do <code>ilist</code> if <code>condition</code> reports true. <p><em>ifelse</em> <code>condition ilist1 ilist2</code> <b>[Observer, Turtle]</b> <p> Do <code>ilist1</code> if <code>condition</code> reports true, otherwise do   <code>ilist2</code>. <p><em>ignore</em> <code>whatever</code> <b>[Observer, Turtle]</b> <p>Ignores the statement immediately following it.<p><em>let</em> <code>variable value</code> <b>[Observer, Turtle]</b> <p> Declares <code>variable</code> as a local variable and assigns <code>value</code>   to it. All variables must have names which begin with a colon. See the Variables   page for more information on local variables.<br>  Example:<br>  let [:myvar 6] <p><em>loop</em> <code>ilist</code> <b>[Observer, Turtle]</b> <p> Do <code>ilist</code> forever.<p><em>output</em> <code>something</code> <b>[Observer, Turtle]</b> <p> Exits the current procedure and returns <code>something</code> <p><em>repeat</em> <code>number ilist</code> <b>[Observer, Turtle]</b> <p> Do <code>ilist</code> <code>number</code> times. <p><em>resett, reset-timer</em><b>[Observer, Turtle]</b> <p> Resets the timer. <p><em>startup</em> <b>[Observer]</b><p>This is a reserved observer procedure name. Anything within the <code>startup</code>   procedure will be executed each time the project is opened.<p><em>stop</em> <b>[Observer, Turtle]</b><p> Tells the current procedure to stop running. <p><em>stopall</em> <b>[Observer, Turtle]</b></p><p> Tells all everything to stop running, including procedures, buttons, monitors,   and command centers.<p><em>timer</em> <b>[Observer, Turtle]</b> <p> Reports the curent value of the timer.<p><em>wait</em> <code>number</code> <b>[Observer, Turtle]</b> <p> Caller waits <code>number</code> seconds before continuing. <p><em>wait-until</em> <code>predicate</code> <b>[Observer, Turtle]</b></p><p> Caller waits until <code>predicate</code> is true. <p>&nbsp;<p>&nbsp; </p></body></html>