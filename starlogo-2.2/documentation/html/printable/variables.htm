<html><head><title>Starlogo 1.0 Documentation</title><meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"></head><body bgcolor="#FFFFFF"><p><em><font size="+1">Variables (Printable)</font></em> </p><h4><b>A note on using variables:</b></h4>You can create new state variables for turtles, patches, and the observer. Whenever you create a new variable, StarLogo automatically creates a collection of new procedures to facilitate the use of the variable. For example, if you create the variable <code>age</code> for the turtles, then the turtles can use the procedure <b>setage</b> to change the value of the variable, and they can use the procedure <b>age</b> to access the value of the variable. <p> You create new variables with the commands <b>turtles-own</b>, <b>patches-own</b>,   and <b>globals</b>. You can type these commands in either the turtle procedures   window or the observer procedures window (but not both), like this: <blockquote>   <p><code><b><font size="3">turtles-own [age speed]</font></b></code> Creates     turtle variables <code><font size="3">age</font></code> and <code><font size="3">speed</font></code><br>    <b><code><font size="3">patches-own [food]</font></code></b> Creates patch     variable <code><font size="3">food</font></code><br>    <b><code><font size="3">globals [time]</font></code></b> Creates global variable     <code><font size="3">time</font></code></p></blockquote><p><font size="3">For turtle variables, the example age is used.&nbsp; For patch   variables, the example food is used.&nbsp; And, for global variables, the example   time is used.&nbsp; In order to use the commands listed below, you must first   create the variables you want.</font></p><p><em>age</em> <b>[Turtle]</b></p><p> Returns the value of the caller's <code>age</code> variable. <p><em>age-at</em> <code>xcor ycor</code> <b>[Observer, Turtle]</b></p><p> Returns the value of the variable <code>age</code> of the turtles at <code>xcor   ycor</code> relative to the caller. <p><em>age-of</em> <code>turtle id number</code> <b>[Observer, Turtle]</b></p><p> Returns the value of the variable <code>age</code> of the turtle with who   number <code>turtle id number</code>. <p><em>age-towards</em> <code>angle distance</code> <b>[Observer, Turtle]</b> <p> Returns a list of all the turtles and the values of their <code>age</code>   variables which are at the patch <code>distance</code> away at angle <code>angle</code>.<p><em>food</em> <b>[Observer, Turtle]</b> <p> Returns the value of the patch variable <code>food</code>.</p><p>NOTE: This is a patch command. It must be called from within an <code>ask-patches</code>   statement. <p><em>food-at</em> <code>xcor ycor</code> <b>[Observer, Turtle]</b> <p> Returns the value of the variable <code>food</code> of the patch at <code>xcor   ycor</code> relative to the caller. <p><em>food-towards</em> <code>angle distance</code> <b>[Observer, Turtle]</b> <p> Returns the value of the<code>food</code> variable of the patch <code>distance</code>   away at angle <code>angle</code>. <p><em>let</em> <code>variable value</code> <b>[Observer, Turtle]</b> <p> Declares <code>variable</code> as a local variable and assigns <code>value</code>   to it. All variables must have names which begin with a colon. See the Variables   page for more information on local variables.<br>  Example:<br>  let [:myvar 6] <p><em>set</em> <code>variable value</code> <b>[Observer, Turtle]</b> <p> Assigns <code>value</code> to <code>variable</code>, where <code>variable</code>   is a local variable which has already been declared. For more information on   local variables, see the Variables page. <p><em>setage</em> <code>anything</code> <b>[Turtle]</b> <p> Sets the turtle's <code>age</code> variable to <code>anything</code>. <p><em>setage-at</em> <code>xcor ycor anything</code> <b>[Observer, Turtle]</b> <p> Sets the variable <code>age</code> of turtles at <code>xcor ycor</code> relative   to the caller to <code>anything</code>. <p><em>setage-of</em> <code>turtle id number anything</code> <b>[Observer, Turtle]</b> <p> Sets the variable <code>age</code> of turtle with who number <code>turtle   id number</code> to <code>anything</code>. <p><em>setage-towards</em> <code>angle distance anything</code> <b>[Observer,   Turtle]</b> <p> Sets the variable <code>age</code> of turtles <code>distance</code> away at   angle <code>angle</code> relative to the caller to <code>anything</code>. <p><em>setfood</em> <code>anything</code> <b>[Observer, Turtle]</b> <p> Sets the variable <code>food</code> of patches to <code>anything</code>. </p><p>NOTE: This is a patch command. It must be called from within an <code>ask-patches</code>   statement <p><em>setfood-at</em> <code>xcor ycor anything</code> <b>[Observer, Turtle]</b> <p> Sets the variable <code>food</code> of the patch at <code>xcor ycor</code>   relative to the caller to <code>anything</code>. <p><em>setfood-towards</em> <code>angle distance anything</code> <b>[Observer,   Turtle]</b></p><p> Sets the variable <code>food</code> of the patch <code>distance</code> away   at angle <code>angle</code> relative to the caller to <code>anything</code>. <p><em>settime</em> <code>anything</code> <b>[Observer]</b></p><p> Sets the value of the <code>globals</code> variable <code>time</code> to <code>anything</code>. <p><em>time</em> <b>[Observer]</b> <p> Returns the value of the <code>globals</code> variable <code>time</code>.<p><b>Local Variables</b> <p>Like <code>globals</code>, local variables are not associated with any specific   patch or turtle. However, the exist only within the procedure within which they   are declared. <p>Example:<code><br>  to check<br>  let [:num who + color]<br>  if :num > who * 2 [setc red]<br>  end</code> <p><b>Parameters</b> <p>Parameters are like local variables, in that they only exist during the procedure   they are associated with. They are &quot;declared&quot; when the caller of procedure   gives them a value. <p>Example:<code><br>  to move :number<br>  fd :number<br>  lt random 360<br>  bk :number<br>  rt random 360<br>  end<br>  <br>  to go<br>  move 30<br>  end </code><p>&nbsp; </p></body></html>